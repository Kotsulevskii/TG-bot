"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const fs_1 = __importDefault(require("fs"));
const TOKEN = "8040472221:AAFul9EXx3oVtKs93rXEW5z-XS7mX3kP8Qo";
const ADMIN_ID = 123456789; // —Ç–≤–æ–π Telegram ID
const bot = new node_telegram_bot_api_1.default(TOKEN, { polling: true });
function loadData() {
    try {
        return JSON.parse(fs_1.default.readFileSync("data.json", "utf8"));
    }
    catch {
        return { "7": {}, "8": {}, "9": {}, "10": {}, "11": {} };
    }
}
function saveData(data) {
    fs_1.default.writeFileSync("data.json", JSON.stringify(data, null, 2), "utf8");
}
let data = loadData();
// ===== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä =====
function classKeyboard() {
    return {
        inline_keyboard: [
            [{ text: "7", callback_data: "class:7" }, { text: "8", callback_data: "class:8" }],
            [{ text: "9", callback_data: "class:9" }, { text: "10", callback_data: "class:10" }],
            [{ text: "11", callback_data: "class:11" }]
        ],
    };
}
function themeKeyboard(cls) {
    const themes = Object.keys(data[cls] || {});
    const rows = themes.map((t) => [{ text: t, callback_data: `theme:${cls}:${t}` }]);
    rows.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back" }]);
    return { inline_keyboard: rows };
}
// ===== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å =====
// /start
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", { reply_markup: classKeyboard() });
});
// Inline –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", (query) => {
    const chatId = query.message?.chat.id;
    if (!chatId)
        return;
    const dataCb = query.data || "";
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    bot.answerCallbackQuery(query.id);
    // –ù–∞–∑–∞–¥
    if (dataCb === "back") {
        bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: classKeyboard(),
        });
        return;
    }
    // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    if (dataCb.startsWith("class:")) {
        const cls = dataCb.split(":")[1];
        if (Object.keys(data[cls]).length > 0) {
            bot.editMessageText(`–¢–µ–º—ã –¥–ª—è ${cls} –∫–ª–∞—Å—Å–∞:`, {
                chat_id: chatId,
                message_id: query.message?.message_id,
                reply_markup: themeKeyboard(cls),
            });
        }
        else {
            bot.editMessageText(`–î–ª—è ${cls} –∫–ª–∞—Å—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º.`, {
                chat_id: chatId,
                message_id: query.message?.message_id,
                reply_markup: classKeyboard(),
            });
        }
        return;
    }
    // –í—ã–±–æ—Ä —Ç–µ–º—ã
    if (dataCb.startsWith("theme:")) {
        const [, cls, theme] = dataCb.split(":");
        const link = data[cls][theme];
        bot.editMessageText(`–¢–µ–º–∞: *${theme}*\n\n–°—Å—ã–ª–∫–∞: ${link || "–ù–µ—Ç —Å—Å—ã–ª–∫–∏"}`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: themeKeyboard(cls),
            parse_mode: "Markdown",
        });
        return;
    }
});
// ===== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====
// /admin
bot.onText(/\/admin/, (msg) => {
    if (msg.from?.id !== ADMIN_ID)
        return;
    bot.sendMessage(msg.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n" +
        "/add_theme [–∫–ª–∞—Å—Å] [—Ç–µ–º–∞]\n" +
        "/del_theme [–∫–ª–∞—Å—Å] [—Ç–µ–º–∞]\n" +
        "/set_link [–∫–ª–∞—Å—Å] [—Ç–µ–º–∞] [—Å—Å—ã–ª–∫–∞]\n" +
        "/del_link [–∫–ª–∞—Å—Å] [—Ç–µ–º–∞]");
});
// –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É
bot.onText(/\/add_theme (\d{1,2}) (.+)/, (msg, match) => {
    if (msg.from?.id !== ADMIN_ID)
        return;
    const cls = match?.[1];
    const theme = match?.[2];
    if (!cls || !theme)
        return;
    if (!data[cls])
        return bot.sendMessage(msg.chat.id, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞.");
    data[cls][theme] = "";
    saveData(data);
    bot.sendMessage(msg.chat.id, `–¢–µ–º–∞ '${theme}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∫–ª–∞—Å—Å—É ${cls}`);
});
// –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É
bot.onText(/\/del_theme (\d{1,2}) (.+)/, (msg, match) => {
    if (msg.from?.id !== ADMIN_ID)
        return;
    const cls = match?.[1];
    const theme = match?.[2];
    if (!cls || !theme)
        return;
    if (data[cls] && data[cls][theme] !== undefined) {
        delete data[cls][theme];
        saveData(data);
        bot.sendMessage(msg.chat.id, `–¢–µ–º–∞ '${theme}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ ${cls}`);
    }
    else {
        bot.sendMessage(msg.chat.id, "–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç.");
    }
});
// –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
bot.onText(/\/set_link (\d{1,2}) (.+) (.+)/, (msg, match) => {
    if (msg.from?.id !== ADMIN_ID)
        return;
    const cls = match?.[1];
    const theme = match?.[2];
    const link = match?.[3];
    if (!cls || !theme || !link)
        return;
    if (data[cls] && data[cls][theme] !== undefined) {
        data[cls][theme] = link;
        saveData(data);
        bot.sendMessage(msg.chat.id, `–°—Å—ã–ª–∫–∞ –¥–ª—è '${theme}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${link}`);
    }
    else {
        bot.sendMessage(msg.chat.id, "–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç.");
    }
});
// –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
bot.onText(/\/del_link (\d{1,2}) (.+)/, (msg, match) => {
    if (msg.from?.id !== ADMIN_ID)
        return;
    const cls = match?.[1];
    const theme = match?.[2];
    if (!cls || !theme)
        return;
    if (data[cls] && data[cls][theme] !== undefined) {
        data[cls][theme] = "";
        saveData(data);
        bot.sendMessage(msg.chat.id, `–°—Å—ã–ª–∫–∞ —É —Ç–µ–º—ã '${theme}' —É–¥–∞–ª–µ–Ω–∞.`);
    }
    else {
        bot.sendMessage(msg.chat.id, "–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç.");
    }
});
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
bot.on("polling_error", (error) => {
    console.error("–û—à–∏–±–∫–∞ polling:", error);
});
